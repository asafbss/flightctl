name: Process Version Files

on:
  push:
    branches: [main]

jobs:
  process:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up prerequisites
      run: |
        mkdir -p tmp
        touch .version-state.json
        jq -e . .version-state.json || echo '{}' > .version-state.json

    - name: Process version files
      id: process
      run: |
        CHANGED=0
        mkdir -p tmp

        for file in versions/*.json; do
          [[ -f "$file" ]] || continue
          filename=$(basename "$file")
          file_hash=$(sha256sum "$file" | cut -d ' ' -f1)
          current_hash=$(jq -r --arg file "$filename" '.[$file] // empty' .version-state.json)

          if [[ "$file_hash" != "$current_hash" ]]; then
            echo "🔁 Processing changed file: $file"

            components=$(jq -c '.components[]' "$file")
            for comp in $components; do
              name=$(echo "$comp" | jq -r '.name')
              git_url=$(echo "$comp" | jq -r '."git-url"')
              revision=$(echo "$comp" | jq -r '.revision')
              dockerfile=$(echo "$comp" | jq -r '.dockerfile')
              platforms=$(echo "$comp" | jq -c '."build-platforms"')
              build_args=$(echo "$comp" | jq -c '."build-args"')
              build_args=$(echo "$build_args" | sed "s|\${GIT_TAG}|$revision|g" | sed "s|\${GIT_COMMIT}|$sha|g")

              # Resolve tag to commit SHA
              sha=$(git ls-remote "$git_url" "refs/tags/$revision^{}" | cut -f1)
              [[ -z "$sha" ]] && sha=$(git ls-remote "$git_url" "refs/tags/$revision" | cut -f1)

              echo "📦 Component: $name"
              echo "  Git URL:    $git_url"
              echo "  Revision:   $revision"
              echo "  Commit SHA: $sha"
              echo "  Dockerfile: $dockerfile"
              echo "  Platforms:  $platforms"
              echo "  Build Args: $build_args"
            done

            # Update state file
            jq --arg file "$filename" --arg hash "$file_hash" '. + {($file): $hash}' .version-state.json > tmp/state.json
            mv tmp/state.json .version-state.json

            CHANGED=1
          else
            echo "⏭️  Skipping unchanged file: $file"
          fi
        done

        echo "CHANGED=$CHANGED" >> $GITHUB_ENV

    - name: Commit updated version-state
      if: env.CHANGED == '1'
      uses: EndBug/add-and-commit@v9
      with:
        add: '.version-state.json'
        message: 'Update version-state.json after processing version changes'

